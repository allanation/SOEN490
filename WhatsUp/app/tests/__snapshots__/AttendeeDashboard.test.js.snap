// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Renders Attendee Dashboard Correctly 1`] = `
<View
  accessibilityIgnoresInvertColors={true}
  style={
    Array [
      Object {
        "flex": 1,
        "paddingTop": 20,
      },
      Object {
        "marginTop": 10,
        "padding": 20,
      },
    ]
  }
>
  <Image
    source={
      Object {
        "uri": undefined,
      }
    }
    style={
      Array [
        Object {
          "bottom": 0,
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        },
        Object {
          "height": undefined,
          "width": undefined,
        },
        undefined,
      ]
    }
  />
  <View
    style={
      Object {
        "flex": 1,
        "left": "2.5%",
        "marginBottom": "45%",
        "marginTop": "5%",
      }
    }
  >
    <View>
      <View
        style={
          Object {
            "flexDirection": "row",
            "justifyContent": "space-between",
          }
        }
      >
        <View>
          <Text
            style={
              Object {
                "color": "#747474",
                "marginBottom": 8,
              }
            }
          >
            <Text>
              Today's April 1, 2023
            </Text>
          </Text>
          <Text
            style={
              Object {
                "fontSize": 25,
                "fontWeight": "bold",
              }
            }
          >
            Welcome, !
          </Text>
          <View />
        </View>
        <View
          accessible={true}
          collapsable={false}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "elevation": 2,
              "flexDirection": "row",
              "marginTop": 5,
              "opacity": 1,
              "shadowOffset": Object {
                "height": 1,
                "width": 1,
              },
              "shadowOpacity": 0.2,
              "shadowRadius": 3,
              "size": 12,
            }
          }
        >
          <View
            style={
              Object {
                "flexDirection": "row",
              }
            }
          >
            <Text />
            <Text
              style={
                Object {
                  "marginLeft": 2,
                }
              }
            />
          </View>
        </View>
      </View>
      <View
        style={
          Object {
            "flexDirection": "row",
            "justifyContent": "space-between",
            "marginTop": 18,
          }
        }
      >
        <View
          style={
            Object {
              "alignItems": "center",
              "alignSelf": "center",
              "backgroundColor": "#fdfdfd",
              "borderRadius": 12,
              "flexDirection": "row",
              "height": 40,
              "shadowColor": "#757575",
              "shadowOffset": Object {
                "height": 3,
                "width": 0,
              },
              "shadowOpacity": 0.3,
              "shadowRadius": 8,
              "width": "90%",
            }
          }
        >
          <View>
            <Text />
          </View>
          <TextInput
            onChangeText={[Function]}
            placeholder="Search for event..."
            style={
              Object {
                "color": "#19191a",
                "marginLeft": 12,
                "width": "80%",
              }
            }
          />
        </View>
        <View
          accessible={true}
          collapsable={false}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "elevation": 2,
              "flexDirection": "row",
              "marginLeft": "2%",
              "marginTop": "0.5%",
              "opacity": 1,
              "shadowOffset": Object {
                "height": 1,
                "width": 1,
              },
              "shadowOpacity": 0.2,
              "shadowRadius": 3,
            }
          }
        >
          <View
            style={
              Object {
                "flexDirection": "row",
              }
            }
          >
            <Text />
            <Text
              style={
                Object {
                  "marginLeft": 2,
                }
              }
            />
          </View>
        </View>
      </View>
      <Text
        style={
          Object {
            "color": "#100101",
            "fontSize": 16,
            "fontWeight": "bold",
            "marginBottom": "3%",
            "marginTop": "4%",
          }
        }
      >
        Popular Events
      </Text>
    </View>
    <RCTScrollView
      data={Array []}
      getItem={[Function]}
      getItemCount={[Function]}
      keyExtractor={[Function]}
      onContentSizeChange={[Function]}
      onLayout={[Function]}
      onMomentumScrollBegin={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      viewabilityConfigCallbackPairs={Array []}
    >
      <View />
    </RCTScrollView>
    <RCTScrollView
      data={Array []}
      getItem={[Function]}
      getItemCount={[Function]}
      keyExtractor={[Function]}
      onContentSizeChange={[Function]}
      onLayout={[Function]}
      onMomentumScrollBegin={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      viewabilityConfigCallbackPairs={Array []}
    >
      <View />
    </RCTScrollView>
  </View>
</View>
`;
